#!/bin/bash
# Authors:
#	Sam Hewitt <hewittsamuel@gmail.com> (original script)
#	Alfredo Hern√°ndez <aldomann.designs@gmail.com>
#
# Description:
#	A post-installation bash script for Antergos
#
# Legal Stuff:
#	This script is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, version 3.

#	This script is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#	GNU General Public License for more details.

#	You should have received a copy of the GNU General Public License
#	along with this script. If not, see <http://www.gnu.org/licenses/>.

tabs 2
clear

echo "#--------------------------------------------#"
echo "#        Antergos Post-Install Script        #"
echo "#--------------------------------------------#"

#----- FUNCTIONS -----#
function sysupgrade {
	# Perform system upgrade
	echo
	show_info 'Performing system upgrade...'
	yaourt -Syua --noconfirm
	if [ -a /var/lib/pacman/db.lck ]; then
		sudo rm /var/lib/pacman/db.lck
	fi
	show_success 'Done.'
	notify-send "System upgrade was successful" -i system-software-update
	exit
}
# ----------------------------------------------------------------------
function applications {
	show_info 'What would you like to do?'
	echo
	echo "0) Set up Pacman configuration?"
	echo
	echo "1) Install basic apps?        [26]"
	echo "2) Install basic games?       [4]"
	echo "3) Install exclusive apps?    [28]"
	echo "4) Install exclusive games?   [5]"
	echo
	echo "5) Install GDM?"
	echo "6) Install Wine?"
	echo "7) Install Sublime Text?"
	echo "8) Install TeXLive?"
	echo
	echo "u) Uninstall unused apps?     [15]"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Set up Pacman configuration
	0)
		show_info 'Seting up Pacman configuration...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo sed -i 's@#CacheDir.*@CacheDir    = /tmp@g' /etc/pacman.conf
			if [ -d /var/cache/pacman ]; then
				sudo rm -rf /var/cache/pacman
			fi
			sudo sed -i 's@#Color@Color@g' /etc/pacman.conf
			sudo sed -i ':a;N;$!ba;s@#\[multilib\]\n#Include = /etc/pacman.d/mirrorlist@\[multilib\]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install basic apps
	1)
		show_info 'Installing basic apps...'
		echo
		echo "Current package list: arc-gtk-theme bleachbit chrome-gnome-shell ffmpegthumbnailer gvfs-goa gvfs-google icedtea-web jre8-openjdk libappindicator-gtk3 mlocate mpv noto-fonts-emoji p7zip pepper-flash reflector simple-scan subdl tilix transmission-cli  aspell-ca aspell-en aspell-es hunspell-en hunspell-es hyphen-en hyphen-es"
		# [Not in Arch repos]: hunspell-ca hyphen-ca
		# [Not installed]: gbrainy skype sound-juicer
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S arc-gtk-theme bleachbit chrome-gnome-shell ffmpegthumbnailer gvfs-goa gvfs-google icedtea-web jre8-openjdk libappindicator-gtk3 mlocate mpv noto-fonts-emoji p7zip pepper-flash reflector simple-scan subdl tilix transmission-cli  aspell-ca aspell-en aspell-es hunspell-en hunspell-es hyphen-en hyphen-es --needed
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install basic games
	2)
		show_info 'Installing basic games...'
		echo
		echo "Current package list: aisleriot gnome-mahjongg gnome-mines quadrapassel"
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S aisleriot gnome-mahjongg gnome-mines quadrapassel --needed
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install exclusive apps
	3)
		show_info 'Installing exclusive apps...'
		echo
		echo "Current package list: android-tools bzr colordiff dconf-editor fdupes filemanager-actions fluidsynth gaupol gimp git gnome-boxes gnome-characters gnome-clocks hamster-time-tracker inkscape mkvtoolnix-cli polari python2-nautilus ruby sigil soundfont-fluid sshpass transmission-cli youtube-dl kdeconnect kde-gtk-config qt5ct qt5-styleplugins"
		# [Not installed]: adobe-source-han-sans-otc-fonts
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S android-tools bzr colordiff dconf-editor fdupes filemanager-actions fluidsynth gaupol gimp git gnome-boxes gnome-characters gnome-clocks hamster-time-tracker inkscape mkvtoolnix-cli polari python2-nautilus ruby sigil soundfont-fluid sshpass transmission-cli youtube-dl kdeconnect kde-gtk-config qt5ct qt5-styleplugins --needed
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install exclusive games
	4)
		show_info 'Installing exclusive games...'
		echo
		echo "Current package list: dolphin-emu gameconqueror retroarch steam steam-native-runtime"
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S dolphin-emu gameconqueror retroarch steam steam-native-runtime --needed
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install GDM
	5)
		show_info 'Installing GDM...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# SRC: http://drunkensloth.weebly.com/home/how-to-switch-from-lightdm-to-gdm-or-any-other-display-manager-on-antergos-or-arch-linux
			sudo pacman -S gdm --needed
			sudo systemctl disable lightdm.service
			sudo systemctl enable gdm.service
			PKG="lightdm"
			if [[ -n $(pacman -Qs $PKG) ]]; then
				sudo pacman -Rncs $PKG
			fi
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install Wine
	6)
		show_info 'Installing Wine...'
		echo
		echo "Current package list: wine wine-mono wine_gecko winetricks"
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S wine wine-mono wine_gecko winetricks --needed
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install Sublime Text
	7)
		show_info 'Installing Sublime Text...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Install the GPG key
			curl -O https://download.sublimetext.com/sublimehq-pub.gpg && sudo pacman-key --add sublimehq-pub.gpg && sudo pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
			# Enable Stable Channel
			echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/stable/x86_64" | sudo tee -a /etc/pacman.conf
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Install TeXLive
	8)
		show_info 'Installing TeXLive...'
		echo
		echo "Current package list: texlive-most"
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S texlive-most
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Uninstall apps
	[Uu]*)
		show_info 'Uninstalling unused apps...'
		echo
		echo "Current package list: brasero gedit gnome-contacts gnome-documents gnome-maps gnome-music gnome-photos gnome-sound-recorder gnome-weather htop numix-frost-themes numix-icon-theme numix-icon-theme-square polari totem"
		# EXCLUSIVE: gedit sound-juicer
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -R antergos-common-meta antergos-gnome-meta;
			sudo pacman -Rncs brasero gedit gnome-contacts gnome-documents gnome-maps gnome-music gnome-photos gnome-sound-recorder gnome-weather htop numix-frost-themes numix-icon-theme numix-icon-theme-square polari totem
			notify-send "Uninstallation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && applications
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && applications;;
	esac
}
# ----------------------------------------------------------------------
function fix-apps {
	show_info 'What would you like to do?'
	echo
	echo "1) Use symbolic icons in Inkscape?"
	echo "2) Enable smooth fonts in Wine?"
	echo "3) Enable coloured emojis?"
	echo
	echo "4) Add hidden .desktop files?"
	echo "5) Add extra .desktop files?"
	echo "6) Set up GNOME Shell app folders?"
	echo "7) Replace Synaptics for libinput?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Inkscape icons
	1)
		show_info 'Applying fix for Inkscape...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Backup icons-old.svg
				sudo mv '/usr/share/inkscape/icons/icons-old.svg' '/usr/share/inkscape/icons/icons.svg'
				sudo mv '/usr/share/inkscape/icons/icons.svg' '/usr/share/inkscape/icons/icons-old.svg'
				# sudo cp '/usr/share/inkscape/icons/tango_icons.svg' '/usr/share/inkscape/icons/icons.svg'
			# Download new icons
				wget https://raw.github.com/gnome-design-team/gnome-icons/master/inkscape-symbolic/inkscape-icons.svg
				sudo mv inkscape-icons.svg '/usr/share/inkscape/icons/icons.svg'
			notify-send "Inkscape" "Symbolic icons have been installed successfully" -i inkscape
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && fix-apps
			;;
		esac
		;;
	# Wine fonts
	2)
		show_info 'Applying fix for Wine...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# SRC: http://files.polosatus.ru/winefontssmoothing_en.sh
			WINE=${WINE:-wine}
			WINEPREFIX=${WINEPREFIX:-$HOME/.wine}
			DIALOG=whiptail
			if [ ! -x "`which "$WINE"`" ]; then
				show_error "Wine was not found. Is it really installed? ($WINE)"
				exit 1
			fi
			if [ ! -x "`which "$DIALOG"`" ]; then
				DIALOG=dialog
			fi
			TMPFILE=`mktemp` || exit 1
			$DIALOG --menu \
				"Please select font smoothing mode for wine programs:" 13 51\
				4\
					1 "Smoothing disabled"\
					2 "Grayscale smoothing"\
					3 "Subpixel smoothing (ClearType) RGB"\
					4 "Subpixel smoothing (ClearType) BGR" 2> $TMPFILE
			STATUS=$?
			ANSWER=`cat $TMPFILE`
			if [ $STATUS != 0 ]; then
				rm -f $TMPFILE
				exit 1
			fi
			MODE=0 # 0 = disabled; 2 = enabled
			TYPE=0 # 1 = regular;  2 = subpixel
			ORIENTATION=1 # 0 = BGR; 1 = RGB
			case $ANSWER in
				1) # disable
					;;
				2) # enable
					MODE=2
					TYPE=1
					;;
				3) # enable cleartype rgb
					MODE=2
					TYPE=2
					;;
				4) # enable cleartype bgr
					MODE=2
					TYPE=2
					ORIENTATION=0
					;;
				*)
					rm -f $TMPFILE
					echo Unexpected option: $ANSWER
					exit 1
					;;
			esac
			echo "REGEDIT4" > $TMPFILE
			echo "[HKEY_CURRENT_USER\Control Panel\Desktop]" >> $TMPFILE
			echo "\"FontSmoothing\"=\"$MODE\"" >> $TMPFILE
			echo "\"FontSmoothingOrientation\"=dword:0000000$ORIENTATION" >> $TMPFILE
			echo "\"FontSmoothingType\"=dword:0000000$TYPE" >> $TMPFILE
			echo "\"FontSmoothingGamma\"=dword:00000578" >> $TMPFILE
			show_info "Updating configuration..."
			$WINE regedit $TMPFILE 2> /dev/null
			rm -f $TMPFILE

			notify-send "Wine" "Font rendering has been fixed successfully" -i wine
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && fix-apps
			;;
		esac
		;;
	# Coloured emojis
	3)
		# SRC: https://www.reddit.com/r/archlinux/comments/52k3t0/proper_color_emoji_support/d7l05nt
		# TEST: https://eosrei.github.io/emojione-color-font/full-demo.html
		show_info 'Installing and setting up noto-fonts-emoji...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S noto-fonts-emoji --needed
			echo '<?xml version="1.0"?>' > ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '<!DOCTYPE fontconfig SYSTEM "fonts.dtd">' >> ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '<fontconfig>' >> ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '  <!-- Use Google Emojis -->' >> ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '  <match target="pattern">' >> ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '    <test qual="any" name="family"><string>Segoe UI Emoji</string></test>' >> ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '    <edit name="family" mode="assign" binding="same"><string>Noto Color Emoji</string></edit>' >> ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '  </match>' >> ~/.config/fontconfig/conf.d/01-emoji.conf
			echo '</fontconfig>' >> ~/.config/fontconfig/conf.d/01-emoji.conf

			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && fix-apps
			;;
		esac
		;;
	# Hidden desktop files
	4)
		show_info 'Adding hidden desktop files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Hidden Desktops
				cd /tmp
				wget https://www.dropbox.com/s/ic9uim3efnkuxpa/hidden-apps.tar.xz
				tar xf hidden-apps.tar.xz
				cd hidden-apps
				cp -r *.desktop $HOME/.local/share/applications
			gtk-update-icon-cache
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && fix-apps
			;;
		esac
		;;
	# Extra desktop files
	5)
		show_info 'Adding hidden desktop files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Extra Desktops
				cd /tmp
				wget https://www.dropbox.com/s/h48ukig4kyb3kjs/changed-apps.tar.xz
				tar xf changed-apps.tar.xz
				cd changed-apps
				cp -r *.desktop $HOME/.local/share/applications
			gtk-update-icon-cache
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && fix-apps
			;;
		esac
		;;
	# GNOME Shell app folders
	6)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			show_info 'In which language is your system? (E)nglish or (S)panish: ' && read REPLY
			case $REPLY in
			# English
			[Ee]* )
				games_appfolder="Games"
				media_appfolder="Media"
				office_appfolder="Office"
				programming_appfolder="Programming"
				social_appfolder="Social"
				utilities_appfolder="Utilities"
				dconf write /org/gnome/desktop/app-folders/folder-children "['Games', 'Media', 'Office', 'Programming', 'Social', 'Utilities']"
				;;
			# Spanish
			[Ss]* )
				games_appfolder="Juegos"
				media_appfolder="Multimedia"
				office_appfolder="Ofim√°tica"
				programming_appfolder="Prograci√≥n"
				social_appfolder="Social"
				utilities_appfolder="Utilidades"
				dconf write /org/gnome/desktop/app-folders/folder-children "['Games', 'Office', 'Utilities']"
				;;
			esac
			dconf write /org/gnome/desktop/app-folders/folders/Games/name "'$games_appfolder'"
			dconf write /org/gnome/desktop/app-folders/folders/Media/name "'$media_appfolder'"
			dconf write /org/gnome/desktop/app-folders/folders/Utilities/name "'$utilities_appfolder'"
			dconf write /org/gnome/desktop/app-folders/folders/Office/name "'$office_appfolder'"
			dconf write /org/gnome/desktop/app-folders/folders/Social/name "'$social_appfolder'"
			dconf write /org/gnome/desktop/app-folders/folders/Programming/name "'$programming_appfolder'"

			dconf write /org/gnome/desktop/app-folders/folders/Games/apps "['five-or-more.desktop', 'four-in-a-row.desktop', 'gnome-chess.desktop', 'gnome-klotski.desktop', 'gnome-mahjongg.desktop', 'gnome-mines.desktop', 'gnome-robots.desktop', 'gnome-sudoku.desktop', 'gnome-tetravex.desktop', 'iagno.desktop', 'lightsoff.desktop', 'quadrapassel.desktop', 'sol.desktop', 'swell-foop.desktop', 'tali.desktop', 'org.gnome.gnome-2048.desktop', 'org.gnome.Hitori.desktop', 'org.gnome.Nibbles.desktop', 'org.gnome.taquin.desktop', 'dolphin-emu.desktop', 'emulationstation.desktop', 'retroarch.desktop', 'gvbam.desktop', 'zsnes.desktop', 'am2r.desktop', 'GameConqueror.desktop', 'gbrainy.desktop', 'hedgewars.desktop', 'minecraft.desktop', 'wesnoth-1.10.desktop', 'battlenet.desktop', 'Blizzard App.desktop', 'StarCraft.desktop', 'war3.desktop', 'war3roc.desktop', 'war3tft.desktop', 'aoe2hd.desktop', 'civ4.desktop', 'steam.desktop', 'steam-native.desktop', 'steam-wine.desktop', 'Portal 2 (Beta).desktop', 'teeworlds.desktop', 'Teeworlds.desktop', 'Torchlight II.desktop', 'World of Goo.desktop', 'Worms Reloaded.desktop']"
			dconf write /org/gnome/desktop/app-folders/folders/Media/apps "['chrome-fahmaaghhglfmonjliepjlchgpgfmobi-Default.desktop', 'chrome-cnciopoikihiagdjbjpnocolokfelagl-Default.desktop', 'eog.desktop', 'gaupol.desktop', 'gcolor3.desktop', 'gimp.desktop', 'gnome-music.desktop', 'gnac.desktop', 'google-musicmanager.desktop', 'gpmdp.desktop', 'gradio.desktop', 'inkscape.desktop', 'lightzone.desktop', 'lmms.desktop', 'mcomix.desktop', 'mpv.desktop', 'org.gnome.Books.desktop', 'org.gnome.Cheese.desktop', 'org.gnome.Screenshot.desktop', 'com.uploadedlobster.peek.desktop', 'popcorntime.desktop', 'vlc.desktop', 'vocal.desktop', 'YACReader.desktop', 'YACReaderLibrary.desktop', 'webtorrent-desktop.desktop']"
			dconf write /org/gnome/desktop/app-folders/folders/Office/apps "['chrome-aohghmighlieiainnegkcijnfilokake-Default.desktop', 'chrome-ejjicmeblgpmajnghnpcppodonldlgfn-Default.desktop', 'chrome-felcaaldnbdncclmgdcncolpebgiejap-Default.desktop', 'chrome-fnboaehgffehgoackjenbjcgcjeflddp-Default.desktop', 'chrome-hmjkmjkepdijhoojdojkdfohbdgmmhki-Default.desktop', 'chrome-ojcflmmmcfpacggndoaaflkmcoblhnbh-Default.desktop', 'bijiben.desktop', 'desktopeditors.desktop', 'dropbox.desktop', 'evince.desktop', 'evolution-calendar.desktop', 'evolution.desktop', 'hamster-time-tracker.desktop', 'hamster-time-tracker-overview.desktop', 'libreoffice-base.desktop', 'libreoffice-calc.desktop', 'libreoffice-draw.desktop', 'libreoffice-impress.desktop', 'libreoffice-math.desktop', 'libreoffice-startcenter.desktop', 'libreoffice-writer.desktop', 'masterpdfeditor.desktop', 'megasync.desktop', 'mendeleydesktop.desktop', 'org.gnome.Calendar.desktop', 'org.gnome.Contacts.desktop', 'org.gnome.Documents.desktop', 'org.gnome.Todo.desktop', 'simple-scan.desktop']"
			dconf write /org/gnome/desktop/app-folders/folders/Programming/apps "['cmake-gui.desktop', 'devdocs-desktop.desktop', 'lstopo.desktop', 'org.gnome.Builder.desktop', 'org.gnome.Devhelp.desktop', 'sublime_text.desktop', 'org.gnome.Sysprof2.desktop', 'anaconda-navigator.desktop', 'imagej.desktop', 'matlab.desktop', 'panoply.desktop', 'pycharm-community.desktop', 'qtiplot.desktop', 'r.desktop', 'rstudio.desktop', 'spyder3.desktop', 'wolfram-mathematica11.desktop', 'www.octave.org-octave.desktop']"
			dconf write /org/gnome/desktop/app-folders/folders/Social/apps "['Discord.desktop', 'org.gnome.Polari.desktop', 'rambox.desktop', 'skypeforlinux.desktop', 'telegramdesktop.desktop']"
			dconf write /org/gnome/desktop/app-folders/folders/Utilities/apps "['bleachbit.desktop', 'ca.desrt.dconf-editor.desktop', 'dosbox.desktop', 'gnome-appfolders-manager.desktop', 'gnome-power-statistics.desktop', 'gnome-tweak-tool.desktop', 'gparted.desktop', 'imagewriter.desktop', 'indicator-kdeconnect.desktop', 'fma-config-tool.desktop', 'org.gnome.Boxes.desktop', 'org.gnome.DiskUtility.desktop', 'org.gnome.FileRoller.desktop', 'org.gnome.font-viewer.desktop', 'org.gnome.Logs.desktop', 'org.gnome.MultiWriter.desktop', 'org.gnome.Terminal.desktop', 'org.gnome.Usage.desktop', 'org.kde.kdeconnect.kcm.desktop', 'pamac-manager.desktop', 'pamac-updater.desktop', 'qt5ct.desktop', 'qtconfig-qt4.desktop', 'redshift-gtk.desktop', 'seahorse.desktop', 'system76-driver.desktop', 'tor-browser.desktop', 'urserver.desktop', 'usb-creator-gtk.desktop', 'vineyard-preferences.desktop', 'virtualbox.desktop', 'wine-uninstaller.desktop', 'wine-winecfg.desktop', 'winetricks.desktop']"

			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && fix-apps
			;;
		esac
		;;
	# Replace Synaptics for libinput
	7)
		show_info 'Replacing Synaptics for libinput...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S xf86-input-libinput --needed
			PKG="xf86-input-synaptics"
			if [[ -n $(pacman -Qs $PKG) ]]; then
				sudo pacman -Rncs $PKG
			fi
			sudo rm -rf /etc/X11/xorg.conf.d/*synaptics*.conf
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && fix-apps
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && fix-apps;;
	esac
}
# ----------------------------------------------------------------------
function dconf-settings {
	show_info 'What would you like to do?'
	echo
	echo "1) Change background and lock wallpapers?"
	echo "2) Set up Nautilus layout?"
	echo "3) Show battery percentage in GNOME Shell?"
	echo "4) Change Night Light temperature?"
	echo
	echo "8) Set Moka/Arc/Roboto UI?"
	echo "9) Set Stock GNOME UI?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Backgrounds
	1)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/desktop/background/picture-uri "'file:///home/aldomann/Pictures/Wallpapers/back.jpg'"
			dconf write /org/gnome/desktop/screensaver/picture-uri "'file:///home/aldomann/Pictures/Wallpapers/lock.jpg'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && dconf-settings
			;;
		esac
		;;
	# Nautilus layout and preferences
	2)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Regular nautilus
				dconf write /org/gnome/nautilus/icon-view/captions "['none', 'size', 'none']"
				dconf write /org/gnome/nautilus/icon-view/thumbnail-size "64"
				dconf write /org/gnome/nautilus/preferences/executable-text-activation "'ask'"
				# dconf write /org/gnome/nautilus/window-state/geometry "'1195x675+380+200'"
				dconf write /org/gnome/nautilus/window-state/sidebar-width "'155'"
				nautilus -q
			# Root nautilus
				sudo dconf write /org/gnome/nautilus/icon-view/captions "['none', 'size', 'none']"
				sudo dconf write /org/gnome/nautilus/icon-view/thumbnail-size "64"
				sudo dconf write /org/gnome/nautilus/preferences/executable-text-activation "'ask'"
				# sudo dconf write /org/gnome/nautilus/window-state/geometry "'1195x675+380+200'"
				# sudo dconf write /org/gnome/nautilus/window-state/sidebar-width "'155'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && dconf-settings
			;;
		esac
		;;
	# Show battery percentage
	3)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/desktop/interface/show-battery-percentage "true"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && dconf-settings
			;;
		esac
		;;
	# Change Night Light temperature
	4)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/settings-daemon/plugins/color/night-light-temperature "uint32 5250"

			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && dconf-settings
			;;
		esac
		;;
	# Moka/Arc UI
	8)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/desktop/wm/preferences/button-layout "':close'"
			dconf write /org/gnome/desktop/interface/font-name "'Roboto 11'"
			dconf write /org/gnome/desktop/interface/document-font-name "'Literata 11'"
			dconf write /org/gnome/desktop/interface/monospace-font-name "'Menlo 11'"
			dconf write /org/gnome/desktop/wm/preferences/titlebar-font "'Roboto Bold 11'"
			dconf write /org/gnome/desktop/interface/gtk-theme "'Arc-Darker'"
			dconf write /org/gnome/desktop/interface/icon-theme "'Moka'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && dconf-settings
			;;
		esac
		;;
	# Stock GNOME UI
	9)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/desktop/wm/preferences/button-layout "':close'"
			dconf write /org/gnome/desktop/interface/font-name "'Cantarell 11'"
			dconf write /org/gnome/desktop/wm/preferences/titlebar-font "'Cantarell Bold 11'"
			dconf write /org/gnome/desktop/interface/gtk-theme "'Adwaita'"
			dconf write /org/gnome/desktop/interface/icon-theme "'Adwaita'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && dconf-settings
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && dconf-settings;;
	esac
}
# ----------------------------------------------------------------------
function hardware {
	show_info 'What would you like to do?'
	echo
	echo "1) Show disk usage?"
	echo "2) Show kernel version?"
	echo "3) Show system controllers?"
	echo "4) Show CPU, RAM and architecture information?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Show disk usage
	1)
		lsblk
		echo
		df -h
		hardware
		;;
	# Show kernel version
	2)
		uname -r # uname -a shows kernel and arch info
		hardware
		;;
	# Show system information
	3)
		lspci -v
		hardware
		;;
	# Show CPU, RAM, arch information
	4)
		grep "model name" /proc/cpuinfo && grep MemTotal /proc/meminfo && lscpu
		hardware
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && hardware;;
	esac
}
# ----------------------------------------------------------------------
function cleanup {
	show_info 'What would you like to do?'
	echo
	echo "1) Remove orphaned packages?"
	echo "2) Clean package cache?"
	echo "3) Optimise pacman database?"
	echo "4) List manually installed packages?"
	echo "5) List locally installed packages?"
	echo "6) Compare AUR backed up packages?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Remove orphaned packages
	1)
		#SRC: https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Removing_unused_packages_.28orphans.29
		if [[ ! -n $(pacman -Qqdt) ]]; then
			show_success 'No orphans to remove.'
			if [[ -n $(pacman -Qqdtt) ]]; then
				show_info "Optionally required packages: $(pacman -Qqdtt)"
			fi
		else
			show_info 'Removing orphaned packages...'
			sudo pacman -Rns $(pacman -Qqdt)
			show_success 'Done.'
		fi
		echo
		cleanup
		;;
	# Clean package cache
	2)
		show_info 'Cleaning package cache...'
		sudo pacman -Sc --noconfirm
		show_success 'Done.'
		echo
		cleanup
		;;
	# Optimise pacman database
	3)
		show_info 'Optimising pacman database...'
		sudo pacman-optimize
		show_success 'Done.'
		echo
		cleanup
		;;
	# List manually installed packages
	4)
		show_info 'Listing packages...'
		sudo pacman -Qet
		show_success 'Done.'
		echo
		cleanup
		;;
	# List locally installed packages
	5)
		show_info 'Listing packages...'
		sudo pacman -Qm
		show_success 'Done.'
		echo
		cleanup
		;;
	# Compare AUR backed up packages
	6)
		show_info 'Listing packages...'
		sudo pacman -Qm | awk '{ gsub(" ","-"); print $0 }' > /tmp/local-list.txt
		ls -R $HOME/Downloads/Software/Installers/aur | awk '/pkg.*/ { gsub("-x86_64.*",""); gsub("-any.*",""); print $0}' | sort > /tmp/backup-list.txt
		colordiff /tmp/local-list.txt /tmp/backup-list.txt | less
		show_success 'Done.'
		echo
		cleanup
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && cleanup;;
	esac
}
# ----------------------------------------------------------------------

#----- MESSAGE FUNCTIONS -----#
show_info() {
	echo -e "\033[1;34m$@\033[0m"
}
show_success() {
	echo -e "\033[1;32m$@\033[0m"
}
show_error() {
	echo -e "\033[1;31m$@\033[m" 1>&2
}

#----- MAIN FUNCTION -----#
function main {
	show_info 'What would you like to do?'
	echo
	# echo "0) Perform system update and upgrade?"
	echo "1) Install favourite applications?"
	echo "2) Change apps behaviour and appearance?"
	echo "3) Perform dconf configurations?"
	echo
	echo "5) View hardware information?"
	echo "6) Cleanup the system?"
	echo
	echo "e) Exit?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
		# 0) sysupgrade;;              # System Upgrade
		1) clear && applications;;   # Install apps
		2) clear && fix-apps;;       # Fix apps
		3) clear && dconf-settings;; # Dconf config
		5) clear && hardware;;       # Hardware info
		6) clear && cleanup;;        # System cleanup
		[Ee]* ) exit 99;;            # Quit
		[Qq]* ) exit 99;;            # Quit
		* ) clear && show_error 'Not an option, try again.' && main;;
	esac
}

#----- RUN MAIN FUNCTION -----#
main

# END OF SCRIPT
