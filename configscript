#!/bin/bash
# Authors:
#	Alfredo Hern√°ndez <aldomann.designs@gmail.com>
#
# Description:
#	A script to manage config files (both system-wide and locally)
#
# Legal Stuff:
#	This script is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, version 3.

#	This script is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#	GNU General Public License for more details.

#	You should have received a copy of the GNU General Public License
#	along with this script. If not, see <http://www.gnu.org/licenses/>.

tabs 2
clear

echo "#--------------------------------------------#"
echo "#            Config Files Script             #"
echo "#--------------------------------------------#"

#----- FUNCTIONS -----#
function config-general {
	show_info 'What would you like to do?'
	echo
	echo "1) Change pacman.conf?      (system)"
	echo "2) Change journald.conf?    (system)"
	echo "3) Create .makepkg.conf?    (local)"
	echo "4) Set up Qt5 integration?  (system)"
	echo "5) Set up Qt5 integration?  (local)"
	echo
	echo "8) Symlink zshrc and zsh_history?"
	echo "9) Symlink bashrc and bash_profile?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Change pacman.conf (system)
	1)
		show_info 'Changing /etc/pacman.conf...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo sed -i 's@#CacheDir.*@CacheDir    = /tmp@g' /etc/pacman.conf
			if [ -d /var/cache/pacman ]; then
				sudo rm -rf /var/cache/pacman
			fi
			sudo sed -i 's@#Color@Color@g' /etc/pacman.conf
			sudo sed -i ':a;N;$!ba;s@#\[multilib\]\n#Include = /etc/pacman.d/mirrorlist@\[multilib\]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf
			clear && config-general
			;;
		# Negative action
		[Nn]* )
			clear && config-general
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-general
			;;
		esac
		;;
	# Change journald.conf (system)
	2)
		show_info 'Changing /etc/systemd/journald.conf...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo journalctl --vacuum-time=2d
			sudo sed -i 's@.*SystemMaxFileSize.*@SystemMaxFileSize=8M@g' /etc/systemd/journald.conf
			sudo sed -i 's@.*RuntimeMaxFileSize.*@RuntimeMaxFileSize=8M@g' /etc/systemd/journald.conf
			sudo sed -i 's@.*SystemMaxUse.*@SystemMaxUse=64M@g' /etc/systemd/journald.conf
			sudo sed -i 's@.*RuntimeMaxUse.*@RuntimeMaxUse=64M@g' /etc/systemd/journald.conf
			clear && config-general
			;;
		# Negative action
		[Nn]* )
			clear && config-general
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-general
			;;
		esac
		;;
	# Create makepkg.conf (local)
	3)
		show_info 'Creating ~/.makepkg.conf...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			echo "PKGEXT='.pkg.tar.xz'" > ~/.makepkg.conf
			clear && config-general
			;;
		# Negative action
		[Nn]* )
			clear && config-general
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-general
			;;
		esac
		;;
	# Set up Qt5 integration (system)
	4)
		show_info 'Seting up Qt5 integration...'
		show_info 'This will install qt5ct & qt5-styleplugins, and edit /etc/environment'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S qt5ct qt5-styleplugins --needed
			if ! grep -q "QT_QPA_PLATFORMTHEME=qt5ct" "/etc/environment"; then
				sudo bash -c "echo "QT_QPA_PLATFORMTHEME=qt5ct" >> /etc/environment"
			fi
			# TODO: modify qt5ct.conf
			clear && config-general
			;;
		# Negative action
		[Nn]* )
			clear && config-general
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-general
			;;
		esac
		;;
	# Set up Qt5 integration (local)
	5)
		show_info 'Seting up Qt5 integration...'
		show_info 'This will install qt5ct & qt5-styleplugins, and add export QT_QPA_PLATFORMTHEME variable'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S qt5ct qt5-styleplugins --needed
			if [ $SHELL="/usr/bin/zsh" ]; then # ZSH (we assume .zshrc already exists)
				show_info 'Integrating using zsh...'
				if ! grep -q "QT_QPA_PLATFORMTHEME=qt5ct" "$HOME/.zshrc"; then
					bash -c 'echo "export QT_QPA_PLATFORMTHEME=qt5ct" >> $HOME/.zshrc'
				fi
			else # BASH (we don't assume .profile already exists)
				show_info 'Integrating using bash...'
				if [[ ! -a $HOME/.profile ]]; then
					touch $HOME/.profile
				fi
				if ! grep -q "QT_QPA_PLATFORMTHEME=qt5ct" "$HOME/.profile"; then
					bash -c 'echo "export QT_QPA_PLATFORMTHEME=qt5ct" >> $HOME/.profile'
				fi
			fi
			# TODO: modify qt5ct.conf
			clear && config-general
			;;
		# Negative action
		[Nn]* )
			clear && config-general
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-general
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && config-general;;
	esac
}
# ----------------------------------------------------------------------
function config-apps {
	show_info 'What would you like to do?'
	echo
	echo "1) Create .Rprofile?        (local)"
	echo "2) Sublime Text? (WIP)"
	echo "3) Change mpv config files? (local)"
	echo "4) True Solarized Tilix?    (local)"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Create .Rprofile
	1)
		show_info 'Creating ~/.Rprofile...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			echo '.libPaths("~/.R/x86_64-pc-linux-gnu-library/3.4")' > ~/.Rprofile
			clear && config-apps
			;;
		# Negative action
		[Nn]* )
			clear && config-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-apps
			;;
		esac
		;;
	# Change mpv config files
	3)
		show_info 'Changing mpv config files...'
		show_info 'This will create/modify mpv.conf & lua-settings/osc.conf'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			if [ ! -d ~/.config/mpv ]; then
				mkdir ~/.config/mpv
			fi
			echo 'osd-font="Roboto"' > ~/.config/mpv/mpv.conf
			echo 'sub-font="Myriad Pro"' >> ~/.config/mpv/mpv.conf
			echo '#sub-font="Helvetica Neue LT Std"' >> ~/.config/mpv/mpv.conf
			echo 'sub-font-size=60' >> ~/.config/mpv/mpv.conf
			echo 'sub-color="#FFFFFFFF"' >> ~/.config/mpv/mpv.conf
			echo 'sub-border-color="#FF171717"' >> ~/.config/mpv/mpv.conf
			echo 'screenshot-directory="~/Pictures/mpv"' >> ~/.config/mpv/mpv.conf
			if [ ! -d ~/.config/mpv/lua-settings ]; then
				mkdir ~/.config/mpv/lua-settings
			fi
			echo '#layout=box' > ~/.config/mpv/lua-settings/osc.conf
			echo '#seekbarstyle=slider' >> ~/.config/mpv/lua-settings/osc.conf
			echo 'deadzonesize=0' >> ~/.config/mpv/lua-settings/osc.conf
			echo 'minmousemove=10' >> ~/.config/mpv/lua-settings/osc.conf
			echo '#scalewindowed=1.5' >> ~/.config/mpv/lua-settings/osc.conf
			echo 'scalefullscreen=1.2' >> ~/.config/mpv/lua-settings/osc.conf
			clear && config-apps
			;;
		# Negative action
		[Nn]* )
			clear && config-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-apps
			;;
		esac
		;;
	# True Solarized Tilix
	4)
		show_info 'Changing Tilix scheme files...'
		show_info 'This will create ../tilix/schemes'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			if [ ! -d ~/.config/tilix/schemes ]; then
				mkdir ~/.config/tilix/schemes
			fi
			# True Solarized Dark
			echo '{' > ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "background-color": "#002A35",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "badge-color": "#FFFFFF",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "comment": "",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "cursor-background-color": "#000000",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "cursor-foreground-color": "#FFFFFF",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "dim-color": "#000000",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "foreground-color": "#829395",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "highlight-background-color": "#000000",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "highlight-foreground-color": "#FFFFFF",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "name": "True Solarized Dark",' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "palette": [ "#073542", "#DC312F", "#859900", "#B48800", "#258AD1", "#D23581", "#29A097", "#EDE7D4", "#073542", "#DC312F", "#859900", "#B48800", "#268AD2", "#D33682", "#29A198", "#FCF5E2" ],' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "use-badge-color": false,' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "use-cursor-color": false,' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "use-dim-color": false,' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "use-highlight-color": false,' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '    "use-theme-colors": false' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			echo '}' >> ~/.config/tilix/schemes/tilix-solarized-dark.json
			# True Solarized Light
			echo '{' > ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "background-color": "#FCF5E2",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "badge-color": "#FFFFFF",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "comment": "",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "cursor-background-color": "#000000",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "cursor-foreground-color": "#FFFFFF",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "dim-color": "#000000",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "foreground-color": "#647981",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "highlight-background-color": "#000000",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "highlight-foreground-color": "#FFFFFF",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "name": "True Solarized Light",' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "palette": [ "#073542", "#DC312F", "#859900", "#B48800", "#258AD1", "#D23581", "#29A097", "#EDE7D4", "#073542", "#DC312F", "#859900", "#B48800", "#268AD2", "#D33682", "#29A198", " #FCF5E2" ],' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "use-badge-color": false,' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "use-cursor-color": false,' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "use-dim-color": false,' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "use-highlight-color": false,' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '    "use-theme-colors": false' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			echo '}' >> ~/.config/tilix/schemes/tilix-solarizedlight.json
			clear && config-apps
			;;
		# Negative action
		[Nn]* )
			clear && config-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-apps
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && config-apps;;
	esac
}
# ----------------------------------------------------------------------
function config-games {
	show_info 'What would you like to do?'
	echo
	echo "1) Retroarch?        (WIP)"
	echo "2) EmulationStation? (WIP)"
	echo "3) Warcraft III?     (WIP)"
	echo "4) StarCraft?        (WIP)"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Set up Systemd Journald configuration
	1)
		show_info 'Doing something...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			echo "Yes!"
			clear && config-games
			;;
		# Negative action
		[Nn]* )
			clear && config-games
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.' && config-games
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && config-games;;
	esac
}
# ----------------------------------------------------------------------

#----- MESSAGE FUNCTIONS -----#
show_info() {
	echo -e "\033[1;34m$@\033[0m"
}
show_success() {
	echo -e "\033[1;32m$@\033[0m"
}
show_error() {
	echo -e "\033[1;31m$@\033[m" 1>&2
}

#----- MAIN FUNCTION -----#
function main {
	show_info 'What would you like to do?'
	echo
	echo "1) Change general config files?"
	echo "2) Change apps config files?"
	echo "3) Change games config files?"
	echo
	echo "e) Exit?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
		1) clear && config-general;; # General
		2) clear && config-apps;;    # Apps
		3) clear && config-games;;   # Games
		[Ee]* ) exit 99;;            # Quit
		[Qq]* ) exit 99;;            # Quit
		* ) clear && show_error 'Not an option, try again.' && main;;
	esac
}

#----- RUN MAIN FUNCTION -----#
main

# END OF SCRIPT
