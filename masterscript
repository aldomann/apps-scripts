#!/bin/bash
# Authors:
#	Sam Hewitt <hewittsamuel@gmail.com> (original script)
#	Alfredo Hern√°ndez <aldomann.designs@gmail.com>
#
# Description:
#	A post-installation bash script for Antergos
#
# Legal Stuff:
#	This script is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, version 3.

#	This script is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.

#	You should have received a copy of the GNU General Public License
#	along with this script.  If not, see <http://www.gnu.org/licenses/>.

# TODO:
	# @applications add AUR packages

tabs 2
clear

echo '#--------------------------------------------#'
echo '#        Antergos Post-Install Script        #'
echo '#--------------------------------------------#'

#----- FUNCTIONS -----#
function sysupgrade {
	# Perform system upgrade
	echo
	show_info 'Performing system upgrade...'
	yaourt -Syua --noconfirm
	if [ -a /var/lib/pacman/db.lck ]; then
		sudo rm /var/lib/pacman/db.lck
	fi
	show_success 'Done.'
	notify-send "System upgrade was successful" -i system-software-update
	exit
}
# ----------------------------------------------------------------------
function applications {
	show_info 'What would you like to do?'
	echo
	echo "0) Set up Pacman configuration?"
	echo
	echo "1) Install basic apps?        [34]"
	echo "2) Install exclusive apps?    [16]"
	echo "3) Install games?             [4]"
	echo "4) Install GDM?"
	echo "5) Uninstall unused apps?     [8]"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Enable extra repositories
	0)
		show_info 'Enabling extra repositories...'
		echo
		echo 'Repositories to be enabled: infinality-bundle'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Set up pacman.conf
				wget https://dl.dropboxusercontent.com/u/1564319/pacman.conf
				sudo mv pacman.conf /etc/pacman.conf
			# Add infinality-bundle key
				# sudo cp
				# sudo dirmngr
				# sudo pacman-key -r 962DDE58
				# sudo pacman-key -f 962DDE58
				# sudo pacman-key --lsign-key 962DDE58
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			applications
			;;
		esac
		;;
	# Install basic apps
	1)
		show_info 'Installing basic apps...'
		echo
		echo 'Current package list: adobe-source-han-sans-otc-fonts aisleriot bleachbit ffmpegthumbnailer gbrainy gimp gnome-clocks gnome-mahjongg gnome-mines gvfs-goa gvfs-google icedtea-web infinality-bundle inkscape jre7-openjdk lib32-gtk2 p7zip quadrapassel simple-scan skype sound-juicer wine wine-mono wine_gecko winetricks aspell-ca aspell-en aspell-es hunspell-en hunspell-es hyphen-en hyphen-es mythes-en mythes-es'
		# [Not in Arch repos]: hyphen-ca myspell-ca mythes-ca
		# [Not installed]: gbrainy skype sound-juicer
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S adobe-source-han-sans-otc-fonts aisleriot bleachbit ffmpegthumbnailer gbrainy gimp gnome-clocks gnome-mahjongg gnome-mines gvfs-goa gvfs-google icedtea-web infinality-bundle inkscape jre7-openjdk lib32-gtk2 p7zip quadrapassel simple-scan skype sound-juicer wine wine-mono wine_gecko winetricks aspell-ca aspell-en aspell-es hunspell-en hunspell-es hyphen-en hyphen-es mythes-en mythes-es
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			applications
			;;
		esac
		;;
	# Install extra apps
	2)
		show_info 'Installing exclusive apps...'
		echo
		# echo 'Old package list: dropbox polari'
		echo 'Current package list: android-tools dconf-editor fluidsynth gaupol git gnome-boxes gnome-characters mkvtoolnix-cli polari qtiplot sigil soundfont-fluid sparkleshare texlive-most thunar youtube-dl'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S android-tools dconf-editor fluidsynth gaupol git gnome-boxes gnome-characters mkvtoolnix-cli polari qtiplot sigil soundfont-fluid sparkleshare texlive-most thunar youtube-dl
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			applications
			;;
		esac
		;;
	# Install games
	3)
		show_info 'Installing games...'
		echo
		echo 'Current package list: cwiid steam vbam-gtk zsnes'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -S cwiid steam vbam-gtk zsnes
			notify-send "Installation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			applications
			;;
		esac
		;;
	# Install GDM
	4)
		show_info 'Installing GDM...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# SRC: http://drunkensloth.weebly.com/home/how-to-switch-from-lightdm-to-gdm-or-any-other-display-manager-on-antergos-or-arch-linux
			sudo pacman -S gdm
			sudo systemctl disable lightdm.service
			sudo systemctl enable gdm.service
			sudo pacman -Rscn lightdm
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			applications
			;;
		esac
		;;
	# Uninstall apps
	5)
		show_info 'Uninstalling unused apps...'
		echo
		echo 'Current package list: brasero empathy gnome-shell-extension-dash-to-dock gnome-sound-recorder numix-frost-themes numix-icon-theme numix-icon-theme-square pidgin'
		# EXCLUSIVE: grbainy soud-juicer
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			sudo pacman -Rscn brasero empathy gnome-shell-extension-dash-to-dock gnome-sound-recorder numix-frost-themes numix-icon-theme numix-icon-theme-square pidgin
			notify-send "Uninstallation was successful"
			clear && applications
			;;
		# Negative action
		[Nn]* )
			clear && applications
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			applications
			;;
		esac
		;;
	# Not in use [22]
		# alacarte arista atom cantor cutemupen easytag gameconqueror gnac gnome-clocks google-earth-stable google-musicmanager-beta hardinfo libreoffice-l10n-es menulibre minitube miro mupen64plus nuvolaplayer pitivi screenkey screenruler unetbootin
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && applications;;
	esac
}
# ----------------------------------------------------------------------
function fix-apps {
	show_info 'What would you like to do?'
	echo
	echo "1) Use symbolic icons in Inkscape?"
	echo "2) Enable smooth fonts in Wine?"
	echo "3) Enable coloured Emojis?"
	echo
	echo "4) Add extra and hidden .desktop files?"
	echo "5) Set up GNOME Shell app folders?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Inkscape icons
	1)
		show_info 'Applying fix for Inkscape...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Backup icons-old.svg
				sudo mv '/usr/share/inkscape/icons/icons-old.svg' '/usr/share/inkscape/icons/icons.svg'
				sudo mv '/usr/share/inkscape/icons/icons.svg' '/usr/share/inkscape/icons/icons-old.svg'
				# sudo cp '/usr/share/inkscape/icons/tango_icons.svg' '/usr/share/inkscape/icons/icons.svg'
			# Download new icons
				wget https://raw.github.com/gnome-design-team/gnome-icons/master/inkscape-symbolic/inkscape-icons.svg
				sudo mv inkscape-icons.svg '/usr/share/inkscape/icons/icons.svg'
			notify-send "Inkscape" "Symbolic icons have been installed successfully" -i inkscape
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			fix-apps
			;;
		esac
		;;
	# Wine fonts
	2)
		show_info 'Applying fix for Wine...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# SRC: http://files.polosatus.ru/winefontssmoothing_en.sh
			WINE=${WINE:-wine}
			WINEPREFIX=${WINEPREFIX:-$HOME/.wine}
			DIALOG=whiptail
			if [ ! -x "`which "$WINE"`" ]; then
				echo "Wine was not found. Is it really installed? ($WINE)"
				exit 1
			fi
			if [ ! -x "`which "$DIALOG"`" ]; then
				DIALOG=dialog
			fi
			TMPFILE=`mktemp` || exit 1
			$DIALOG --menu \
				"Please select font smoothing mode for wine programs:" 13 51\
				4\
					1 "Smoothing disabled"\
					2 "Grayscale smoothing"\
					3 "Subpixel smoothing (ClearType) RGB"\
					4 "Subpixel smoothing (ClearType) BGR" 2> $TMPFILE
			STATUS=$?
			ANSWER=`cat $TMPFILE`
			if [ $STATUS != 0 ]; then
				rm -f $TMPFILE
				exit 1
			fi
			MODE=0 # 0 = disabled; 2 = enabled
			TYPE=0 # 1 = regular;  2 = subpixel
			ORIENTATION=1 # 0 = BGR; 1 = RGB
			case $ANSWER in
				1) # disable
					;;
				2) # enable
					MODE=2
					TYPE=1
					;;
				3) # enable cleartype rgb
					MODE=2
					TYPE=2
					;;
				4) # enable cleartype bgr
					MODE=2
					TYPE=2
					ORIENTATION=0
					;;
				*)
					rm -f $TMPFILE
					echo Unexpected option: $ANSWER
					exit 1
					;;
			esac
			echo "REGEDIT4
			[HKEY_CURRENT_USER\Control Panel\Desktop]
			\"FontSmoothing\"=\"$MODE\"
			\"FontSmoothingOrientation\"=dword:0000000$ORIENTATION
			\"FontSmoothingType\"=dword:0000000$TYPE
			\"FontSmoothingGamma\"=dword:00000578" > $TMPFILE
			echo -n "Updating configuration..."
			$WINE regedit $TMPFILE 2> /dev/null
			rm -f $TMPFILE

			notify-send "Wine" "Font rendering has been fixed successfully" -i wine
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			fix-apps
			;;
		esac
		;;
	# Desktop files
	4)
		show_info 'Adding hidden desktop files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Extra Desktops
				cd /tmp
				wget http://dl.dropbox.com/u/1564319/changed-apps.tar.gz
				tar -xzf changed-apps.tar.gz
				cd changed-apps
				cp -r *.desktop $HOME/.local/share/applications
			# Hidden Desktops
				cd /tmp
				wget http://dl.dropbox.com/u/1564319/hidden-apps.tar.gz
				tar -xzf hidden-apps.tar.gz
				cd hidden-apps
				cp -r *.desktop $HOME/.local/share/applications
			gtk-update-icon-cache
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			fix-apps
			;;
		esac
		;;
	# GNOME Shell app folders
	5)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			gsettings set org.gnome.desktop.app-folders folder-children "['Games', 'Office', 'Utilities']"
			show_info 'In which language is your system? (E)nglish or (S)panish: ' && read REPLY
			case $REPLY in
			# English
			[Ee]* )
				games_appfolder="Games"
				office_appfolder="Office"
				utilities_appfolder="Utilities"
				;;
			# Spanish
			[Ss]* )
				games_appfolder="Juegos"
				office_appfolder="Ofim√°tica"
				utilities_appfolder="Utilidades"
				;;
			esac # TODO: Note that there's no "* )" show_error option
			gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Games/ name "$games_appfolder"
			gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Utilities/ name "$utilities_appfolder"
			gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Office/ name "$office_appfolder"
			gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Games/ apps "['battlenet.desktop', 'cutemupen.desktop', 'dolphin-emu.desktop', 'GameConqueror.desktop', 'gbrainy.desktop', 'gvbam.desktop', 'hedgewars.desktop', 'minecraft.desktop', 'Portal 2 (Beta).desktop', 'steam.desktop', 'war3roc.desktop', 'war3tft.desktop', 'five-or-more.desktop', 'four-in-a-row.desktop', 'gnome-chess.desktop', 'gnome-klotski.desktop', 'gnome-mahjongg.desktop', 'gnome-mines.desktop', 'gnome-nibbles.desktop', 'gnome-robots.desktop', 'gnome-sudoku.desktop', 'gnome-tetravex.desktop', 'hitori.desktop', 'iagno.desktop', 'lightsoff.desktop', 'org.gnome.gnome-2048.desktop', 'quadrapassel.desktop', 'sol.desktop', 'starcraft.desktop', 'wesnoth-1.10.desktop', 'Worms Reloaded.desktop', 'zsnes.desktop', 'swell-foop.desktop', 'tali.desktop', 'teeworlds.desktop', 'Teeworlds.desktop', 'wiican.desktop']"
			gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Office/ apps "['chrome-aohghmighlieiainnegkcijnfilokake-Default.desktop', 'chrome-ejjicmeblgpmajnghnpcppodonldlgfn-Default.desktop', 'chrome-felcaaldnbdncclmgdcncolpebgiejap-Default.desktop', 'chrome-hmjkmjkepdijhoojdojkdfohbdgmmhki-Default.desktop', 'chrome-ojcflmmmcfpacggndoaaflkmcoblhnbh-Default.desktop', 'bijiben.desktop', 'dropbox.desktop', 'evince.desktop', 'evolution-calendar.desktop', 'evolution.desktop', 'libreoffice-base.desktop', 'libreoffice-calc.desktop', 'libreoffice-draw.desktop', 'libreoffice-impress.desktop', 'libreoffice-math.desktop', 'libreoffice-startcenter.desktop', 'libreoffice-writer.desktop', 'masterpdfeditor.desktop', 'megasync.desktop', 'org.gnome.Calendar.desktop', 'org.gnome.Contacts.desktop', 'org.gnome.Documents.desktop', 'pdfchain.desktop', 'simple-scan.desktop', 'sparkleshare.desktop']"
			gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/Utilities/ apps "['bleachbit-root.desktop', 'bleachbit.desktop', 'ca.desrt.dconf-editor.desktop', 'dconf-editor.desktop', 'dosbox.desktop', 'file-roller.desktop', 'gdebi.desktop', 'gnome-appfolders-manager.desktop', 'gnome-boxes.desktop', 'gnome-disks.desktop', 'gnome-power-statistics.desktop', 'gnome-system-log.desktop', 'gnome-tweak-tool.desktop', 'gparted.desktop', 'imagewriter.desktop', 'indicator-kdeconnect.desktop', 'nact.desktop', 'nexulockr.desktop', 'org.gnome.Boxes.desktop', 'org.gnome.DiskUtility.desktop', 'org.gnome.FileRoller.desktop', 'org.gnome.font-viewer.desktop', 'org.gnome.Logs.desktop', 'org.gnome.MultiWriter.desktop', 'org.gnome.Terminal.desktop', 'org.kde.kdeconnect.kcm.desktop', 'pamac-manager.desktop', 'pamac-updater.desktop', 'qt5ct.desktop', 'qtconfig-qt4.desktop', 'redshift-gtk.desktop', 'seahorse.desktop', 'software-properties-drivers.desktop', 'software-properties-gnome.desktop', 'synaptic.desktop', 'system76-driver.desktop', 'urserver.desktop', 'usb-creator-gtk.desktop', 'vineyard-preferences.desktop', 'wine-uninstaller.desktop', 'wine-winecfg.desktop', 'winetricks.desktop']"
			clear && fix-apps
			;;
		# Negative action
		[Nn]* )
			clear && fix-apps
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			fix-apps
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && fix-apps;;
	esac
}
# ----------------------------------------------------------------------
function dconf-settings {
	show_info 'What would you like to do?'
	echo
	echo "1) Change background and lock wallpapers?"
	echo "2) Set up Nautilus layout?"
	echo "3) Show battery percentage in GNOME Shell?"
	echo
	echo "4) Set Moka/Arc/Roboto UI?"
	echo "5) Set Stock GNOME UI?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Backgrounds
	1)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/desktop/background/picture-uri "'file:///home/aldomann/Pictures/Wallpapers/back.jpg'"
			dconf write /org/gnome/desktop/screensaver/picture-uri "'file:///home/aldomann/Pictures/Wallpapers/lock.jpg'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			dconf-settings
			;;
		esac
		;;
	# Nautilus layout and preferences
	2)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			# Regular nautilus
				dconf write /org/gnome/nautilus/icon-view/captions "['size', 'none', 'date_modified']"
				dconf write /org/gnome/nautilus/icon-view/thumbnail-size "96"
				dconf write /org/gnome/nautilus/preferences/executable-text-activation "'ask'"
				dconf write /org/gnome/nautilus/preferences/sort-directories-first "true"
				# dconf write /org/gnome/nautilus/window-state/geometry "'1195x675+380+200'"
				dconf write /org/gnome/nautilus/window-state/sidebar-width "'160'"
				nautilus -q
			# Root nautilus
				sudo dconf write /org/gnome/nautilus/icon-view/captions "['size', 'none', 'date_modified']"
				sudo dconf write /org/gnome/nautilus/icon-view/thumbnail-size "96"
				sudo dconf write /org/gnome/nautilus/preferences/executable-text-activation "'ask'"
				sudo dconf write /org/gnome/nautilus/preferences/sort-directories-first "true"
				# sudo dconf write /org/gnome/nautilus/window-state/geometry "'1195x675+380+200'"
				sudo dconf write /org/gnome/nautilus/window-state/sidebar-width "'160'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			dconf-settings
			;;
		esac
		;;
	# Moka/Arc UI
	4)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/shell/overrides/button-layout "':close'"
			dconf write /org/gnome/desktop/wm/preferences/button-layout "':close'"
			dconf write /org/gnome/desktop/interface/font-name "'Roboto 11'"
			dconf write /org/gnome/desktop/interface/monospace-font-name "'Menlo 11'"
			dconf write /org/gnome/desktop/wm/preferences/titlebar-font "'Roboto Bold 11'"
			dconf write /org/gnome/desktop/interface/gtk-theme "'Arc-Darker'"
			# dconf write /org/gnome/desktop/wm/preferences/theme "'Adwaita'"
			dconf write /org/gnome/desktop/interface/icon-theme "'Moka'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			dconf-settings
			;;
		esac
		;;
	# Stock GNOME UI
	5)
		show_info 'Changing dconf files...'
		echo
		show_info 'Proceed? (Y)es, (N)o :' && read REPLY
		case $REPLY in
		# Positive action
		[Yy]* )
			dconf write /org/gnome/shell/overrides/button-layout "':close'"
			dconf write /org/gnome/desktop/wm/preferences/button-layout "':close'"
			dconf write /org/gnome/desktop/interface/font-name "'Cantarell 11'"
			dconf write /org/gnome/desktop/wm/preferences/titlebar-font "'Cantarell Bold 11'"
			dconf write /org/gnome/desktop/interface/gtk-theme "'Adwaita'"
			# dconf write /org/gnome/desktop/wm/preferences/theme "'Adwaita'"
			dconf write /org/gnome/desktop/interface/icon-theme "'gnome'"
			clear && dconf-settings
			;;
		# Negative action
		[Nn]* )
			clear && dconf-settings
			;;
		# Error
		* )
			clear && show_error 'Sorry, try again.'
			dconf-settings
			;;
		esac
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && hardware;;
	esac
}
# ----------------------------------------------------------------------
function hardware {
	show_info 'What would you like to do?'
	echo
	echo "1) Show disk usage?"
	echo "2) Show kernel version?"
	echo "3) Show system controllers?"
	echo "4) Show CPU, RAM and architecture information?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Show disk usage
	1)
		lsblk
		echo
		df -h
		hardware
		;;
	# Show kernel version
	2)
		uname -r # uname -a shows kernel and arch info
		hardware
		;;
	# Show system information
	3)
		lspci -v
		hardware
		;;
	# Show CPU, RAM, arch information
	4)
		grep "model name" /proc/cpuinfo && grep MemTotal /proc/meminfo && lscpu
		hardware
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && hardware;;
	esac
	}
# ----------------------------------------------------------------------
function cleanup {
	show_info 'What would you like to do?'
	echo
	echo "1) Remove orphaned packages?"
	echo "2) Clean package cache?"
	echo "3) Optimise pacman database?"
	echo "4) List locally installed packages?"
	echo
	echo "r) Return?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
	# Remove orphaned packages
	1)
		if [[ ! -n $(pacman -Qdtt) ]]; then
			show_success 'No orphans to remove.'
		else
			show_info 'Removing orphaned packages...'
			sudo pacman -Rns $(pacman -Qdtq)
			show_success 'Done.'
		fi
		echo
		cleanup
		;;
	# Clean package cache
	2)
		show_info 'Cleaning package cache...'
		sudo pacman -Sc --noconfirm
		show_success 'Done.'
		echo
		cleanup
		;;
	# Optimise pacman database
	3)
		show_info 'Optimising pacman database...'
		sudo pacman-optimize
		show_success 'Done.'
		echo
		cleanup
		;;
	# List locally installed packages
	4)
		show_info 'Listing packages...'
		sudo pacman -Qm
		show_success 'Done.'
		echo
		cleanup
		;;
	# Return
	[Rr]*)
		clear && main;;
	# Invalid choice
	* )
		clear && show_error 'Not an option, try again.' && cleanup;;
	esac
}
# ----------------------------------------------------------------------

#----- MESSAGE FUNCTIONS -----#
show_info() {
	echo -e "\033[1;34m$@\033[0m"
}
show_success() {
	echo -e "\033[1;32m$@\033[0m"
}
show_error() {
	echo -e "\033[1;31m$@\033[m" 1>&2
}

#----- MAIN FUNCTION -----#
function main {
	show_info 'What would you like to do?'
	echo
	# echo "1) Perform system update and upgrade?"
	echo "2) Install favourite applications?"
	echo "3) Change apps behaviour and appearance?"
	# echo "4) Perform dconf configurations?"
	echo
	echo "5) View hardware information?"
	echo "6) Cleanup the system?"
	echo
	echo "q) Quit?"
	echo
	show_info 'Enter your choice:' && read REPLY
	case $REPLY in
		# 1) sysupgrade;;            # System Upgrade
		2) clear && applications;; # Install apps
		3) clear && fix-apps;;      # Fix apps
		# 4) clear && dconf-settings;;     # Dconf config
		5) clear && hardware;;     # Hardware info
		6) clear && cleanup;;      # System cleanup
		gsr) clear && nohup gnome-shell --replace & ;; # gnome-shell --replace
		[Qq]* ) exit 99;; # Quit
		* ) clear && show_error 'Not an option, try again.' && main;;
	esac
}

#----- RUN MAIN FUNCTION -----#
main

# END OF SCRIPT
